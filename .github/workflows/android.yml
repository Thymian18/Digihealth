name: Android CI
# Inspired by https://medium.com/upday-devs/how-to-setup-github-actions-for-android-projects-a94e8e3b0539

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

# If we want to add custom properties, create a file in .github/ci-gradle.properties and uncomment the following lines
#      - name: Copy gradle properties file
#        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew (assemble_instrumented_tests_script)
        run: |
          chmod +x gradlew
          ./gradlew assembleDebugAndroidTest

      - name: Build the app
        run: ./gradlew assembleDebug

      - name: Upload apk
        uses: actions/upload-artifact@v3
        with:
          name: debug apk
          path: app/build/outputs/apk/debug/app-debug.apk

    #- name: Install emulator dependencies
    #  run: sdkmanager --install "system-images;android-30;google_apis;x86"
    #- name: Create AVD
    #  run: echo no | avdmanager create avd --force --name emulator --package "system-images;android-30;google_apis;x86"
    #- name: Start AVD in the background
    #  run: $ANDROID_HOME/emulator/emulator -avd emulator -no-audio -no-boot-anim -gpu swiftshader_indirect -no-snapshot -no-window -camera-back none
    #- name: Wait for AVD to boot
    #  run: adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 3; done; input keyevent 82'

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        api-level: [ 33 ] # add more API levels here to run tests on more emulators
        target: [ default ]
        arch: [ x86 ]
        profile: [ Pixel 2 ]

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

#      - name: Copy  gradle properties file
#        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew (assemble_instrumented_tests_script)
        run: |
          chmod +x gradlew
          ./gradlew assembleDebugAndroidTest

      - name: Run detekt
        run: ./gradlew detektCheck

      - name: Run unit tests
        run: ./gradlew test --stacktrace

      - name: Instrumentation Tests
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86
          profile: Pixel 2
          script: ./gradlew connectedCheck --stacktrace

      - name: Upload Reports
        uses: actions/upload-artifact@v3
        with:
          name: Test-Reports
          path: app/build/reports
        if: always()

#      - name: Grant execute permission for gradlew (assemble_instrumented_tests_script)
#        run: |
#          chmod +x gradlew
#          ./gradlew assembleDebugAndroidTest
#
#      - name: Disable animations script
#        run: |
#          adb shell settings put global window_animation_scale 0.0
#          adb shell settings put global transition_animation_scale 0.0
#          adb shell settings put global animator_duration_scale 0.0
#
#      - name: Screen record background script
#        run: for n in $(seq 1 20); do adb exec-out screenrecord --time-limit=180 --output-format=h264 - > $n.h264; done
#
#      - name: Check script
#        run: ./gradlew check connectedCheck
#
#      - name: Build with Gradle
#        run: ./gradlew build
#
#      - name: Wait for screen record to finish
#        run: |
#          pkill -2 -x adb
#          sleep 2
#
